(declare-enum-sort LightStatus (On Off))

; Set-of-transitions-style definition
(define-system TimedSwitch2 
    :input ((press Bool)) 
    :output ((sig Bool))
    :local ((s LightStatus) (n Int))
    :inv (= sig (= s On))
    :init (and
        (= n 0)
        (ite press (= s On) (= s Off))
    )
    :trans
        (let (; Transitions
            (stay-off (and (= s Off) (not press') (= s' Off) (= n' n)))
            (turn-on (and (= s Off) press' (= s' On) (= n' n)))
            (stay-on (and (= s On) (not press') (< n 10) (= s' On)
                        (= n' (+ n 1))))
            (turn-off (and (= s On) (or press' (>= n 10))
                        (= s' Off) (= n' 0)))
            )
        (or stay-off turn-on turn-off stay-on)
    )
)

; check system not part of the slides example
(check-system TimedSwitch2
  :input ((press Bool)) 
  :output ((sig Bool))
  :local ((s LightStatus) (n Int))
  :reachable (r1 (and (press) (not sig) (= s Off)))
  :query (p1 (r1))
)